name: $(Build.DefinitionName)_$(Build.RequestedFor)_$(Build.BuildId)_$(ReleaseTag)_$(Rev:.rrr)
trigger: none
jobs:
- job: build
  strategy:
    maxParallel: 4
    matrix:
      X86:
        Runtime: 'x86'
        OutputFolder: 'Win32'
      X64:
        Runtime: 'x64'
        OutputFolder: 'Win64'
      ARM:
        Runtime: 'arm'
        OutputFolder: 'ARM'
      ARM64:
        Runtime: 'arm64'
        OutputFolder: 'ARM64'
  variables:
    BinaryPath: ""
  displayName: 1 - Build
  timeoutInMinutes: 90
  cancelTimeoutInMinutes: 1
  pool:
    name: PowerShell1ES
    vmImage: MMS2019TLS #EO requirement - TLS Image
    demands:
    - docker
  steps:
  - checkout: self
    clean: true
   # Download and extract nuget package with non-stubbed MicrosoftTelemetry.h header
  - task: NuGetAuthenticate@0
    inputs:
      nuGetServiceConnections: msftNugetConnection
  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '$(Build.SourcesDirectory)\contrib\win32\OpenSSH\packages.config'
      feedsToUse: 'config'
      nugetConfigPath: '$(Build.SourcesDirectory)\contrib\win32\OpenSSH\NuGet.config'
      externalFeedCredentials: 'msftNugetConnection'
      restoreDirectory: 'Nuget'
  # Replace the stubbed MicrosoftTelemetry.h with the real version from the nuget package
  # Delete the existing stubbed MicrosoftTelemetry.h first, to ensure that if it is no longer at the expected path that the task, and build, fails
  # if package version changes in packages.config, folder name will need to be updated here
  - pwsh : | 
      del $(Build.SourcesDirectory)\contrib\win32\OpenSSH\MicrosoftTelemetry.h
      mv $(Build.SourcesDirectory)\contrib\win32\OpenSSH\NuGet\Microsoft.Telemetry.Inbox.Native.10.0.18362.1-190318-1202.19h1-release.amd64fre\build\native\inc\MicrosoftTelemetry.h $(Build.SourcesDirectory)\contrib\win32\OpenSSH\
    failOnStderr: true
    displayName: 'MicrosoftTelemetry.h: replace with the real one'
  - pwsh : |
      Write-verbose "--docker info---" -verbose

      docker info

      Write-verbose "--docker image ls---" -verbose

      docker image ls

      Write-verbose "--docker container ls --all---" -verbose

      docker container ls --all

      Write-verbose "--git branch ---" -verbose

      git branch

      exit 0
    name: PowerShell_1
    displayName: Get Environment
  - pwsh: | 
      $(Build.SourcesDirectory)\contrib\win32\OpenSSH\vstsbuild.ps1 -Name Onecore-$(Runtime)
    displayName: Build OneCore Package
    env:
      MY_ACCESS_TOKEN: $(System.AccessToken)
  - pwsh: |
      $vstsCommandString = "vso[task.setvariable variable=BinaryPath]${env:OpenSSH-$(Runtime)}"

      Write-Host "sending " + $vstsCommandString

      Write-Host "##$vstsCommandString"

      dir "${env:OpenSSH-$(Runtime)}\*" -Recurse
    displayName: Get BinaryPath
  - pwsh: | 
      $(Build.SourcesDirectory)\contrib\win32\OpenSSH\vstsbuild.ps1 -BuildPath $(BinaryPath)
    displayName: Create OneCore Package
  - pwsh: |
      dir "$(Build.StagingDirectory)\*" -Recurse
    name: ''
    displayName: dir staging directory
    continueOnError: True
  - task: EsrpMalwareScanning@1
    displayName: ESRP Malware Scanning
    inputs:
      ConnectedServiceName: 'pwshScanning'
      FolderPath: '$(Build.StagingDirectory)\OpenSSH-Original\OpenSSH-$(OutputFolder)_symbols'
      Pattern: '*.json,*.exe,*.dll,*.pdb,*.ps1,*.psm1,*.psd1,*.man,*.log,*.txt'
      Region: 'PuertoRico'
      SessionTimeout: '30'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
- job: static_analysis
  displayName: 2 - Compliance Tests and Post Build Analysis
  timeoutInMinutes: 30
  cancelTimeoutInMinutes: 1
  dependsOn: build
  variables:
    # APIScan group contains APIScanClient, APIScanTenant, and APIScanSecret
    - group: APIScan
    # PAT group contains vpack-pat and git-pat
    - group: PAT
  pool:
    name: Powershell1ES
    demands:
    - docker
  steps:
  - checkout: self
    clean: true
  - task: DownloadBuildArtifacts@0
    name: ''
    displayName: Download artifacts
    continueOnError: false
    inputs:
      downloadType: specific
      artifactName: PowerShell-$(Version)-symbols-win-x86.zip
      itemPattern: '**/*'
      extractTars: false
  - pwsh: |
      Get-ChildItem -Recurse "$(Build.StagingDirectory)\*"
    displayName: dir StagingDirectory directory
    continueOnError: True
  - pwsh: |
      dir "$(Build.SourcesDirectory)\*"
    name: ''
    displayName: dir SourcesDirectory directory
    continueOnError: True
  - pwsh: |
      Get-ChildItem -Recurse "$(System.ArtifactsDirectory)\*"
    displayName: dir ArtifactsDirectory directory
    continueOnError: True
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@4
    name: ''
    displayName: 'Run BinSkim '
    inputs:
      InputType: 'Basic'
      Function: 'analyze'
      TargetPattern: 'binskimPattern'
      AnalyzeTargetBinskim: |
          $(System.ArtifactsDirectory)\OpenSSH-Win64\*.exe
          $(System.ArtifactsDirectory)\OpenSSH-Win32\*.exe
          $(System.ArtifactsDirectory)\OpenSSH-Arm\*.exe
          $(System.ArtifactsDirectory)\OpenSSH-Arm64\*.exe
      AnalyzeSymPath: '$(System.ArtifactsDirectory)\OpenSSH-Win64_Symbols;$(System.ArtifactsDirectory)\OpenSSH-Win32_Symbols;$(System.ArtifactsDirectory)\OpenSSH-Arm_Symbols;$(System.ArtifactsDirectory)\OpenSSH-Arm64_Symbols'
      AnalyzeConfigPath: '$(Build.SourcesDirectory)\contrib\win32\OpenSSH\BinSkimConfig.xml'
      AnalyzeVerbose: true
      AnalyzeHashes: true
      AnalyzeStatistics: true
# Task needed to run ESRP scan because it wasn't finding the correct .net runtime version
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: 'runtime'
      version: '2.1.0'
      installationPath: $(Agent.TempDirectory)/dotnet
      performMultiLevelLookup: true
  - task: EsrpMalwareScanning@1
    displayName: ESRP Malware Scanning
    inputs:
      ConnectedServiceName: 'pwshScanning'
      FolderPath: '$(System.ArtifactsDirectory)'
      Pattern: '*.json,*.exe,*.dll,*.pdb,*.ps1,*.psm1,*.psd1,*.man,*.log,*.txt'
      Region: 'PuertoRico'
      SessionTimeout: '30'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
  - task: CopyFiles@2
    displayName: Copy PREfast xml files to SDLNativeRulesDir
    enabled: False
    inputs:
      SourceFolder: $(Agent.BuildDirectory)\i
      Contents: >
        **\*.nativecodeanalysis.xml
      TargetFolder: $(Agent.BuildDirectory)\_sdt\logs\SDLNativeRules
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: Run PoliCheck
    continueOnError: True
    inputs:
      targetType: F
      optionsFC: 0
      optionsXS: 1
      optionsPE: '1|2|3|4'
      optionsHMENABLE: 0
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    name: ''
    displayName: Run CredScan
    continueOnError: True
    inputs:
      toolMajorVersion: V2
      toolVersionV2: LatestPreRelease
      scanFolder: $(Build.SourcesDirectory)\
      suppressionsFile: $(Build.SourcesDirectory)\contrib\win32\openssh\CredScanSuppress.json
      debugMode: false
      folderSuppression: false
  - task: APIScan@2
    name: ''
    displayName: Run APIScan
    continueOnError: True
    inputs:
      softwareFolder: $(System.ArtifactsDirectory)\OpenSSH-Win64;$(System.ArtifactsDirectory)\OpenSSH-Win32
      softwareName: OpenSSH
      softwareVersionNum: $(ReleaseTag)
      symbolsFolder: $(System.ArtifactsDirectory)\OpenSSH-Win64_Symbols;$(System.ArtifactsDirectory)\OpenSSH-Win32_Symbols
      isLargeApp: false
      verbosityLevel: silent
    env:
      AzureServicesAuthConnectionString: RunAs=App;AppId=$(APIScanClient);TenantId=$(APIScanTenant);AppKey=$(APIScanSecret)
  - task: AutoApplicability@1
    name: ''
    displayName: Run AutoApplicability
    continueOnError: True
    inputs:
      ExternalRelease: true
      IsSoftware: true
      DataSensitivity: lbi
  - task: CodeMetrics@1
    name: ''
    displayName: 'Run CodeMetrics '
    continueOnError: True
    # when enabled, task skips scanning all of the provided exe/dlls
    enabled: False
    inputs:
      Files: $(System.ArtifactsDirectory)\OpenSSH-Win64\*.exe;$(System.ArtifactsDirectory)\OpenSSH-Win64\*.dll;$(System.ArtifactsDirectory)\OpenSSH-Win32\*.exe;$(System.ArtifactsDirectory)\OpenSSH-Win32\*.dll;$(System.ArtifactsDirectory)\OpenSSH-Arm64\*.exe;$(System.ArtifactsDirectory)\OpenSSH-Arm64\*.dll;$(System.ArtifactsDirectory)\OpenSSH-Arm\*.exe;$(System.ArtifactsDirectory)\OpenSSH-Arm\*.dll;
  - task: VulnerabilityAssessment@0
    name: ''
    displayName: Run Vulnerability Assessment
    continueOnError: True
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    name: ''
    displayName: Publish Security Analysis Logs
    continueOnError: True
  - task: TSAUpload@1
    name: ''
    displayName: 'TSA upload to Codebase: OpenSSH_vPack_202108 Stamp: Azure'
    inputs:
      tsaVersion: TsaV2
      tsaStamp: Azure
      codeBaseName: OpenSSH_vPack_202108
      uploadFortifySCA: false
      uploadFxCop: false
      uploadModernCop: false
      uploadPREfast: false
      uploadRoslyn: false
      uploadTSLint: false
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Detection
    continueOnError: True
  - pwsh: |
      Write-Host "Copy the exe and pdb files to the respective folder to publish"
      Write-Host("Create arm64 dir")
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm64"
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm64\fre"

      Write-Host("Copy arm64 dir")
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Arm64\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm64\fre\" -Recurse -Filter *.exe
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Arm64\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm64\fre\" -Recurse -Filter *.dll
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Arm64_Symbols\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm64\fre\" -Recurse -Filter *.pdb

      Write-Host("Copy arm32")
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm"
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm\fre"

        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Arm\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm\fre\" -Recurse -Filter *.exe
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Arm\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm\fre\" -Recurse -Filter *.dll
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Arm_Symbols\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\arm\fre\" -Recurse -Filter *.pdb

      Write-Host("Create x86")
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\i386"
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\i386\fre"

        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win32\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\i386\fre\" -Recurse -Filter *.exe
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win32\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\i386\fre\" -Recurse -Filter *.dll
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win32_Symbols\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\i386\fre\" -Recurse -Filter *.pdb

      Write-Host("Create x64")
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\amd64"
        New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\amd64\fre"

        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win64\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\amd64\fre\" -Recurse -Filter *.exe
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win64\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\amd64\fre\" -Recurse -Filter *.dll
        copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win64_Symbols\*" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\amd64\fre\" -Filter *.pdb -Recurse

      # Scan the directories and list all the files
      Write-Host "List the exe and pdb files in the $(ReleaseFolder) folder to publish"
      Get-ChildItem -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)" -Recurse
    displayName: Copy Artifacts to release_folder
    errorActionPreference: silentlyContinue
  - pwsh: |
      Write-Host "Copy the config files to release directory"
      Write-Host("Create miscfiles dir")

      New-Item -ItemType "directory" -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\miscfiles"

      Add-Content -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\binplace.rsp" -Value '$(TARGET_DIRECTORY)\fre\scp.exe

      $(TARGET_DIRECTORY)\fre\sftp.exe

      $(TARGET_DIRECTORY)\fre\sftp-server.exe

      $(TARGET_DIRECTORY)\fre\ssh.exe

      $(TARGET_DIRECTORY)\fre\ssh-add.exe

      $(TARGET_DIRECTORY)\fre\ssh-agent.exe

      $(TARGET_DIRECTORY)\fre\sshd.exe

      $(TARGET_DIRECTORY)\fre\ssh-keygen.exe

      $(TARGET_DIRECTORY)\fre\ssh-shellhost.exe

      $(TARGET_DIRECTORY)\fre\ssh-keyscan.exe

      $(TARGET_DIRECTORY)\fre\libcrypto.dll

      miscfiles\sshd_config_default

      miscfiles\moduli'

      copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win32\moduli" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\miscfiles\"
      copy-item "$(System.ArtifactsDirectory)\OpenSSH-Win32\sshd_config_default" -Destination "$(System.ArtifactsDirectory)\$(ReleaseFolder)\miscfiles\"

      Get-ChildItem -Path "$(System.ArtifactsDirectory)\$(ReleaseFolder)\miscfiles" -Recurse
    displayName: Copy config files to release_folder
    errorActionPreference: silentlyContinue
  - pwsh: |
        Write-Host "Log variables"
        Write-Host "ReleaseFolder = $(ReleaseFolder)"
        Write-Host "Build.SourcesDirectory = $(Build.SourcesDirectory)"
        Write-Host "System.ArtifactsDirectory = $(System.ArtifactsDirectory)"
        Write-Host "Destination = $(Destination)"
        Write-Host "$(Destination)\$(ReleaseFolder)"
        Write-Host "Log variables -- End"
    displayName: Log folder names
    enabled: False
    errorActionPreference: silentlyContinue
  - task: PkgESVPack@12
    displayName: Package ES - VPack
    condition: succeededOrFailed()
    inputs:
      vpackToken: $(vpack-pat)
      versionAs: parts
      sourceDirectory: $(System.ArtifactsDirectory)\$(ReleaseFolder)
      description: OpenSSH for Windows
      pushPkgName: openssh
      majorVer: $(majorVersion)
      minorVer: $(minorVersion)
      patchVer: $(patchVersion)
      metadata: $(Build.SourceVersion)
      feeds: Nuget.vPack
      publishvNuget: false
      taskLogVerbosity: Diagnostic
  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifact
    enabled: False
    inputs:
      path: $(Destination)
      artifactName: openssh.man
  - task: PublishBuildArtifacts@1
    displayName: Publish VPack Artifact
    continueOnError: True
    inputs:
      PathtoPublish: $(System.ArtifactsDirectory)\$(ReleaseFolder)
      ArtifactName: openssh
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'
  - task: PkgESSecComp@10 
    displayName: Security and Compliance tasks
    inputs:
      fileNewBugs: false
      checkInConfigPath: GitCheckin.json
      dropOverride: '$(XES_VPACKMANIFESTDIRECTORY)'
      vpackToken: $(vpack-pat)
  - task: PkgESFCIBGit@12
    inputs:
      configPath: 'GitCheckin.json'
      artifactsDirectory: $(XES_VPACKMANIFESTDIRECTORY)
      # this is the build token that is scoped to mscodehub & microsoft orgs
      paToken: $(git-pat)
      # pkgesgitsubmit is a project contributor so user token does not need to be set
      taskLogVerbosity: 'Diagnostic'
  - task: PkgESSendMail@10
    inputs:
      to: 'kryalava@microsoft.com;bagajjal@microsoft.com;slee@microsoft.com;daniel.maertens@microsoft.com;tessgauthier@microsoft.com;vthiebaut@microsoft.com'
      subject: 'ACTION REQUIRED: Package ES Git Submit Check-in'
      bodyType: 'string'
      body: "OpenSSH VPack Pull Request: https://dev.azure.com/microsoft/OS/_git/OS.2020/pullrequest/ - must see build log for PR number"
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    name: PostAnalysis_16
    displayName: Post Analysis
    condition: succeededOrFailed()
    inputs:
      APIScan: true
      BinSkim: true
      CredScan: true
